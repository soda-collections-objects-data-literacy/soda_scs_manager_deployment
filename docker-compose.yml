services:
  drupal:
    container_name: scs-manager-drupal
    image: ghcr.io/rnsrk/soda_scs_manager_images:drupal10.3.1-php8.2-apache-bookworm-soda-scs-manager-dev
    volumes:
      - drupal-modules:/var/www/html/modules
      - drupal-profiles:/var/www/html/profiles
      - drupal-themes:/var/www/html/themes
      - drupal-libraries:/var/www/html/libraries
      - drupal-sites:/var/www/html/sites
    env_file: ".env"
    environment:
      DB_DRIVER: ${DB_DRIVER}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DRUPAL_USER: ${DRUPAL_USER}
      DRUPAL_PASSWORD: ${DRUPAL_PASSWORD}
      SITE_NAME: ${SITE_NAME}
    depends_on:
      - mariadb
    restart: unless-stopped
    networks:
      - scs-manager
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      - traefik.http.routers.scs-manager-http.rule=Host(`scs-manager.${DOMAIN}`)
      - traefik.http.routers.scs-manager-http.entrypoints=http
      - traefik.http.routers.scs-manager-http.middlewares=https-redirect
      - traefik.http.routers.scs-manager-https.rule=Host(`scs-manager.${DOMAIN}`)
      - traefik.http.routers.scs-manager-https.entrypoints=https
      - traefik.http.routers.scs-manager-https.tls=true
      - traefik.http.routers.scs-manager-https.tls.certresolver=le
      - traefik.http.routers.scs-manager-ssh.entrypoints=ssh
      - traefik.http.services.scs-manager.loadbalancer.server.port=80

  database:
    container_name: scs-manager-database
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mariadb:/var/lib/mysql
    networks:
      - scs-manager
      - database-network
    ports:
      - "3306:3306"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.mariadb.rule=Host(`db.${DOMAIN}`)
        - traefik.http.services.mariadb.loadbalancer.server.port=3306
  
  portainer-agent:
    container_name: scs-manager-portainer-agent
    image: portainer/agent:latest
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer-ce:
    container_name: scs-manager-portainer
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    environment:
      - USER=${PORTAINER_USER}
      - PASSWORD=${PORTAINER_PASSWORD}
    volumes:
      - portainer-data:/data
    networks:
      - traefik-public
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
      - "traefik.enable=true"
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - "traefik.http.routers.portainer-ce.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer-ce.entrypoints=https"
      - traefik.http.routers.portainer-ce.tls=true
      - traefik.http.routers.portainer-ce.tls.certresolver=le
      - "traefik.http.services.portainer-ce.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer-ce.service=portainer-ce"
  reverse-proxy:
    # Use the latest v3.0.x Traefik image available
    image: traefik:v3.0
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Listen on port 443, default for HTTPS
      - 443:443
      # Listen to SSH to be able to access the Docker node
      - 2222:22
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables TRAEFIK_USERNAME and TRAEFIK_HASHED_PASSWORD
        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME?Variable not set}:${TRAEFIK_HASHED_PASSWORD?Variable not set}
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create an entrypoint "ssh" listening on port 2222
      - --entrypoints.ssh.address=:2222
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable TRAEFIK_EMAIL
      - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  agent_network:
    external: true
  database-network:
    external: true
  scs-manager:
  traefik-public:
    external: true

volumes:
  drupal-libraries:
  drupal-modules:
  drupal-profiles:
  drupal-sites:
  drupal-themes:
  mariadb:
  portainer-data:

  traefik-public-certificates: