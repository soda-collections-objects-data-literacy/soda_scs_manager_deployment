#todo use label mappings

services:
  # Filemanagement
  access-proxy:
    image: alpine:latest
    container_name: access-proxy
    restart: unless-stopped
    command: >
      sh -c "id filemanager >/dev/null 2>&1 || adduser -D -u 9000 filemanager && id www-data >/dev/null 2>&1 || adduser -D -u 33 -G www-data www-data && tail -f /dev/null"
    volumes:
      - shared-data:/shared
      - /var/scs-manager/snapshots:/var/scs-manager/snapshots
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=false"

  # JupyterHub
  jupyterhub:
    container_name: jupyterhub
    build: ./jupyterhub/jupyterhub
    restart: unless-stopped
    env_file:
      - ./jupyterhub/.secret.env
    environment:
      DOCKER_JUPYTER_IMAGE: spawner_image
      DOCKER_NETWORK: jupyterhub
      HUB_IP: 0.0.0.0
      JUPYTERHUB_OPENREFINE_DIR: $JUPYTERHUB_OPENREFINE_DIR
      JUPYTERHUB_SHARE: $JUPYTERHUB_SHARE
      KC_ADMIN_GROUPS: $KC_ADMIN_GROUPS
      KC_USER_GROUPS: $KC_USER_GROUPS
      KC_AUTHORIZE_URL: ${KC_URL}/realms/${KC_REALM}/protocol/openid-connect/auth
      KC_TOKEN_URL: ${KC_URL}/realms/${KC_REALM}/protocol/openid-connect/token
      KC_USERINFO_URL: ${KC_URL}/realms/${KC_REALM}/protocol/openid-connect/userinfo
      KC_OAUTH_CALLBACK_URL: https://${JUPYTERHUB_DOMAIN}/hub/oauth_callback
    volumes:
      - jupyterhub-group-map:/root
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jupyterhub
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.jupyterhub.rule=Host(`jupyterhub.${SCS_DOMAIN}`)"
      - "traefik.http.routers.jupyterhub.entrypoints=web,websecure"
      - "traefik.http.routers.jupyterhub.middlewares=https-redirect"
      - "traefik.http.routers.jupyterhub.tls=true"
      - "traefik.http.routers.jupyterhub.tls.certresolver=le"
      - "traefik.http.services.jupyterhub.loadbalancer.server.port=8000"

  # This service is just here to re-build the spawner image every time
  image_builder:
    container_name: image_builder
    image: spawner_image
    build:
      context: /var/www/deploy/soda_scs_manager_deployment/jupyterhub/spawner_image
    pull_policy: always
    entrypoint: ["true"]
    deploy:
      replicas: 0 # Ensures the service isn't started

  # Ontology deamon
  lontod:
    image: ghcr.io/tkw1536/lontod:latest
    container_name: lontod
    restart: unless-stopped
    user: root
    volumes:
      - ./lontod/data/ontologies:/data/:ro
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lontod.rule=Host(`ontologies.sammlungen.io`)"
      - "traefik.http.routers.lontod.entrypoints=web,websecure"
      - "traefik.http.routers.lontod.middlewares=https-redirect"
      - "traefik.http.routers.lontod.tls=true"
      - "traefik.http.routers.lontod.tls.certresolver=le"
      - "traefik.http.services.lontod.loadbalancer.server.port=8080"

  # Nextcloud
  nextcloud:
    image: nextcloud:31.0-fpm
    container_name: nextcloud
    restart: unless-stopped
    volumes:
      - nextcloud-data:/var/www/html
      - ./nextcloud/hooks/post-installation:/docker-entrypoint-hooks.d/post-installation
      # Does not take this config, why?
      #- ./nextcloud/custom/custom-config.php:/var/www/html/config/custom-config.php
    expose:
      - 80
      - 9000
    environment:
      - ONLYOFFICE_JWT_SECRET=${ONLYOFFICE_JWT_SECRET}
      - MYSQL_HOST=database
      - MYSQL_DATABASE=${NEXTCLOUD_DB_NAME}
      - MYSQL_USER=${NEXTCLOUD_DB_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER:-admin}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-admin}
      - OVERWRITEPROTOCOL=https
      - OVERWRITEHOST=nextcloud.${SCS_DOMAIN}
      - REDIS_HOST=redis
    depends_on:
      - database
      - redis
    networks:
      - nextcloud
      - reverse-proxy
    labels:
      - "traefik.enable=false"
  onlyoffice-document-server:
    container_name: onlyoffice-document-server
    image: onlyoffice/documentserver:8.3
    restart: unless-stopped
    environment:
      #- DB_TYPE=mysql
      #- DB_HOST=${ONLYOFFICE_DB_HOST}
      #- DB_USER=${ONLYOFFICE_DB_USER}
      #- DB_PASSWORD=${ONLYOFFICE_DB_PASSWORD}
      #- DB_NAME=${ONLYOFFICE_DB_NAME}
      - JWT_ENABLED=true
      - JWT_SECRET=${ONLYOFFICE_JWT_SECRET}
      - JWT_HEADER=Authorization
      - JWT_IN_BODY=true
    networks:
      - nextcloud
      - reverse-proxy
    depends_on:
      - nextcloud
    expose:
      - '80'
      - '443'
    volumes:
      - onlyoffice-data:/var/www/onlyoffice/Data
      - onlyoffice-log:/var/log/onlyoffice
      #- shared-data:/var/www/onlyoffice/documentserver_data/public
    labels:
      - "traefik.enable=false"

  nextcloud-reverse-proxy:
    container_name: nextcloud-reverse-proxy
    image: nginx:1.27
    restart: unless-stopped
    volumes:
      - ./nextcloud/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
      - nextcloud-data:/var/www/html
    networks:
      - nextcloud
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.nextcloud-reverse-proxy.rule=Host(`nextcloud.${SCS_DOMAIN}`)"
      - "traefik.http.routers.nextcloud-reverse-proxy.entrypoints=web,websecure"
      - "traefik.http.routers.nextcloud-reverse-proxy.middlewares=https-redirect,nextcloud-redirectregex,nextcloud-webfinger,nextcloud-nodeinfo"
      - "traefik.http.routers.nextcloud-reverse-proxy.tls=true"
      - "traefik.http.routers.nextcloud-reverse-proxy.tls.certresolver=le"
      - "traefik.http.services.nextcloud-reverse-proxy.loadbalancer.server.port=80"


  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - nextcloud

  # OpenGdb
  opengdb-proxy:
    image: nginxinc/nginx-unprivileged:latest
    container_name: opengdb-proxy
    depends_on:
      - traefik
      - rdf4j
      - authproxy
      - outproxy
    volumes:
      - ./opengdb_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.opengdb-proxy.rule=Host(`ts.${SCS_DOMAIN}`)"
      - "traefik.http.routers.opengdb-proxy.entrypoints=web,websecure"
      - "traefik.http.routers.opengdb-proxy.middlewares=https-redirect"
      - "traefik.http.routers.opengdb-proxy.tls=true"
      - "traefik.http.routers.opengdb-proxy.tls.certresolver=le"
      - "traefik.http.services.opengdb-proxy.loadbalancer.server.port=80"
    restart: unless-stopped

  rdf4j:
    image: eclipse/rdf4j-workbench:5.1.0
    container_name: rdf4j
    environment:
      - JAVA_OPTS=-Xms1g -Xmx6g -Dhttp.nonProxyHosts="" -Dhttp.proxyHost=outproxy -Dhttp.proxyPort=8080 -Dhttps.proxyHost=outproxy -Dhttps.proxyPort=8080
    volumes:
      - rdf4j-data:/var/rdf4j
      - rdf4j-logs:/usr/local/tomcat/logs
    depends_on:
      - traefik
      - portainer
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  outproxy:
    image: ghcr.io/fau-cdi/open_gdb_outproxy:latest
    container_name: outproxy
    depends_on:
      - rdf4j
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  authproxy:
    image: ghcr.io/fau-cdi/open_gdb_authproxy:latest
    container_name: authproxy
    environment:
      - DJANGO_CSRF_TRUSTED_ORIGINS=${DJANGO_CSRF_TRUSTED_ORIGINS}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SUPERUSER_NAME=${DJANGO_SUPERUSER_NAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    volumes:
      - authproxy-data:/data/
    depends_on:
      - rdf4j
      - traefik
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  # SCS Manager
  portainer:
    image: portainer/portainer-ce:2.21.4
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - portainer-data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - traefik
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${SCS_DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=web,websecure"
      - "traefik.http.routers.portainer.middlewares=https-redirect"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=le"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.routers.edge.rule=Host(`edge.${SCS_DOMAIN}`)"
      - "traefik.http.routers.edge.entrypoints=web,websecure"
      - "traefik.http.services.edge.loadbalancer.server.port=8000"
      - "traefik.http.routers.edge.service=edge"
      - "traefik.http.routers.edge.middlewares=https-redirect"
    restart: unless-stopped

  scs-manager:
    image: ghcr.io/soda-collections-objects-data-literacy/scs-manager-image:latest
    container_name: scs-manager
    volumes:
      - ./scs-manager/drupal:/opt/drupal
      - /var/scs-manager/snapshots:/var/scs-manager/snapshots
    environment:
      DB_DRIVER: ${DB_DRIVER}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DRUPAL_USER: ${DRUPAL_USER}
      DRUPAL_PASSWORD: ${DRUPAL_PASSWORD}
      DRUPAL_SITE_NAME: ${DRUPAL_SITE_NAME}
    depends_on:
      - database
      - traefik
      - portainer
    networks:
      - reverse-proxy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.manager.rule=Host(`${SCS_DOMAIN}`)"
      - "traefik.http.routers.manager.entrypoints=web,websecure"
      - "traefik.http.routers.manager.middlewares=https-redirect"
      - "traefik.http.routers.manager.tls=true"
      - "traefik.http.routers.manager.tls.certresolver=le"
      - "traefik.http.services.manager.loadbalancer.server.port=80"
    restart: unless-stopped

  # SQL database
  database:
    image: mariadb:11.5.2
    container_name: database
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      #MYSQL_INNODB_BUFFER_POOL_SIZE: 4G
      #MYSQL_INNODB_LOG_FILE_SIZE: 1G
      MYSQL_MAX_CONNECTIONS: 1000
      #MYSQL_INNODB_FLUSH_LOG_AT_TRX_COMMIT: 2
      #MYSQL_INNODB_IO_CAPACITY: 200
      #MYSQL_SORT_BUFFER_SIZE: "256M"
      #MYSQL_READ_BUFFER_SIZE: "256M"
      #MYSQL_QUERY_CACHE_SIZE: "256M"
      #MYSQL_QUERY_CACHE_TYPE: "ON"
    volumes:
      - database-data:/var/lib/mysql
      - /var/scs-manager/snapshots:/var/scs-manager/snapshots
      - ./scripts/database:/var/scs-manager/scripts/database
    ports:
      - 3306:3306
    depends_on:
      - traefik
      - portainer
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.tcp.routers.database.entrypoints=mysql"
      - "traefik.tcp.routers.database.rule=HostSNI(`db.${SCS_DOMAIN}`)"
      - "traefik.tcp.routers.database.tls=true"
      - "traefik.tcp.routers.database.tls.certresolver=le"
      - "traefik.tcp.routers.database.tls.passthrough=true"
      - "traefik.tcp.services.database.loadbalancer.server.port=3306"
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    depends_on:
      - database
      - traefik
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.adminer.rule=Host(`adminer.${SCS_DOMAIN}`)"
      - "traefik.http.routers.adminer.entrypoints=web,websecure"
      - "traefik.http.routers.adminer.middlewares=https-redirect"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=le"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  # Traefik
  traefik:
    image: traefik:3.0
    container_name: traefik
    ports:
      - 80:80
      - 443:443
    networks:
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"

      # Middlewares
      ## Basic Auth
      - "traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME}:${TRAEFIK_HASHED_PASSWORD}"
      ## Redirect HTTP to HTTPS
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.middlewares.https-redirect.redirectscheme.port=443"
      ## Nextcloud Headers
      - "traefik.http.middlewares.nextcloud-headers.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.nextcloud-headers.headers.forceSTSHeader=true"

      ## Nextcloud redirectregex Middleware für .well-known Endpoints
      - "traefik.http.middlewares.nextcloud-redirectregex.redirectregex.permanent=true"
      # Carddav und Caldav
      - "traefik.http.middlewares.nextcloud-redirectregex.redirectregex.regex=^https?://([^/]+)/\\.well-known/(card|cal)dav"
      - "traefik.http.middlewares.nextcloud-redirectregex.redirectregex.replacement=https://$${1}/remote.php/dav"
      # Webfinger
      - "traefik.http.middlewares.nextcloud-webfinger.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-webfinger.redirectregex.regex=^https?://([^/]+)/\\.well-known/webfinger"
      - "traefik.http.middlewares.nextcloud-webfinger.redirectregex.replacement=https://$${1}/index.php/.well-known/webfinger"
      # Nodeinfo
      - "traefik.http.middlewares.nextcloud-nodeinfo.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-nodeinfo.redirectregex.regex=^https?://([^/]+)/\\.well-known/nodeinfo"
      - "traefik.http.middlewares.nextcloud-nodeinfo.redirectregex.replacement=https://$${1}/index.php/.well-known/nodeinfo"

      # Routers
      - "traefik.http.routers.reverse-proxy.rule=Host(`traefik.${SCS_DOMAIN}`)"
      - "traefik.http.routers.reverse-proxy.entrypoints=web,websecure"
      - "traefik.http.routers.reverse-proxy.middlewares=admin-auth,https-redirect"
      - "traefik.http.routers.reverse-proxy.tls=true"
      - "traefik.http.routers.reverse-proxy.tls.certresolver=le"
      - "traefik.http.routers.reverse-proxy.service=api@internal"

    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - reverse-proxy-certificates:/certificates
    command:
      # Enable Docker provider
      - --providers.docker
      # Disable exposing services without Traefik labels
      - --providers.docker.exposedbydefault=false
      # Listen on port 80 for HTTP requests
      - --entrypoints.web.address=:80
      # Listen on port 443 for HTTPS requests
      - --entrypoints.websecure.address=:443
      # Listen on port 3306 for MySQL requests
      - --entrypoints.mysql.address=:3306
      # Redirect HTTP requests to HTTPS
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Use the specified email address for Let's Encrypt certificate requests
      - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL}
      # Use the HTTP challenge for Let's Encrypt certificate requests
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      # Use the specified storage location for Let's Encrypt certificates
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS-ALPN-01 challenge for Let's Encrypt certificate requests
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable access log output
      - --accesslog
      # Enable general log output
      - --log
      # Enable the Traefik API
      - --api
      # Enable the Traefik API dashboard
      - --api.dashboard=true

volumes:
  authproxy-data:
  drawio-data:
  opt-drupal:
  database-data:
  jupyterhub-group-map:
    name: jupyterhub-group-map
  nextcloud-data:
  onlyoffice-data:
  onlyoffice-log:
  portainer-data:
  rdf4j-data:
  rdf4j-logs:
  reverse-proxy-certificates:
  shared-data:
    #name: shared-data # because of docker compose its soda_scs_manager_deployment_shared-data

networks:
  nextcloud:
    name: nextcloud
    driver: bridge
  reverse-proxy:
    name: reverse-proxy
    external: true
  jupyterhub:
    name: jupyterhub
    driver: bridge
