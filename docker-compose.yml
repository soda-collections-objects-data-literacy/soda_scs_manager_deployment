services:
  manager:
    image: ghcr.io/soda-collections-objects-data-literacy/scs-manager-image:1.x
    volumes:
      - drupal-modules:/var/www/html/modules
      - drupal-profiles:/var/www/html/profiles
      - drupal-themes:/var/www/html/themes
      - drupal-libraries:/var/www/html/libraries
      - drupal-sites:/var/www/html/sites
    environment:
      DB_DRIVER: ${DB_DRIVER}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DRUPAL_USER: ${DRUPAL_USER}
      DRUPAL_PASSWORD: ${DRUPAL_PASSWORD}
      DRUPAL_SITE_NAME: ${DRUPAL_SITE_NAME}
    depends_on:
      - database
      - reverse-proxy
      - portainer-ce
    networks:
      - reverse-proxy
    deploy:
      mode: global
      labels:
        # Enable Traefik as a reverse proxy and load balancer
        # Traefik will be accessible via the manager.${DOMAIN} hostname
        # and will redirect all requests to HTTPS
        - "traefik.enable=true"
        # Traefik should only listen on the reverse-proxy network
        - "traefik.docker.network=reverse-proxy"
        # Traefik should only run on nodes with the reverse-proxy.reverse-proxy-certificates label
        - "traefik.constraint-label=reverse-proxy"
        # Define the rule for the Traefik router
        - "traefik.http.routers.manager.rule=Host(`${DOMAIN}`)"
        # Traefik should listen on both HTTP and HTTPS
        - "traefik.http.routers.manager.entrypoints=web,websecure"
        # Apply the HTTPS redirect middleware
        - "traefik.http.routers.manager.middlewares=https-redirect"
        # Enable TLS for the Traefik router
        - "traefik.http.routers.manager.tls=true"
        # Use the Let's Encrypt certificate resolver for the Traefik router
        - "traefik.http.routers.manager.tls.certresolver=le"
        # Set the port for the Traefik service to 80
        - "traefik.http.services.manager.loadbalancer.server.port=80"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  database:
    image: mariadb:11.5.2
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_INNODB_BUFFER_POOL_SIZE: 4G
      MYSQL_INNODB_LOG_FILE_SIZE: 1G
      MYSQL_MAX_CONNECTIONS: 1000
      MYSQL_INNODB_FLUSH_LOG_AT_TRX_COMMIT: 2
      MYSQL_INNODB_IO_CAPACITY: 200
      MYSQL_SORT_BUFFER_SIZE: "256M"
      MYSQL_READ_BUFFER_SIZE: "256M"
      MYSQL_QUERY_CACHE_SIZE: "256M"
      MYSQL_QUERY_CACHE_TYPE: "ON"
    volumes:
      - database-data:/var/lib/mysql
    ports:
      - 3306:3306
    depends_on:
      - reverse-proxy
      - portainer-ce
    networks:
      - reverse-proxy
    deploy:
      mode: global
      labels:
        # Enable Traefik as a reverse proxy and load balancer
        # Traefik will be accessible via the db.${DOMAIN} hostname
        # and will redirect all requests to HTTPS
        - "traefik.enable=false"
        # Traefik should only listen on the reverse-proxy network
        - "traefik.docker.network=reverse-proxy"
        # Traefik should only run on nodes with the reverse-proxy.reverse-proxy-certificates label
        - "traefik.constraint-label=reverse-proxy"
        # Entry point for the Traefik service
        - "traefik.tcp.routers.database.entrypoints=mysql"
        # Define the rule for the Traefik router
        - "traefik.tcp.routers.database.rule=HostSNI(`db.${DOMAIN}`)"
        # Enable TLS
        - "traefik.tcp.routers.database.tls=true"
        - "traefik.tcp.routers.database.tls.certresolver=le"
        # Passthrough TLS without terminating the connection
        - "traefik.tcp.routers.database.tls.passthrough=true"
        # Set the port for the Traefik service to 3306
        - "traefik.tcp.services.database.loadbalancer.server.port=3306"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  rdf4j:
    image: eclipse/rdf4j-workbench:5.0.2

    environment:
      - JAVA_OPTS=-Xms1g -Xmx6g -Dhttp.nonProxyHosts="" -Dhttp.proxyHost=outproxy -Dhttp.proxyPort=8080 -Dhttps.proxyHost=outproxy -Dhttps.proxyPort=8080
    volumes:
      - rdf4j-data:/var/rdf4j
      - rdf4j-logs:/usr/local/tomcat/logs
    depends_on:
      - reverse-proxy
      - portainer-ce
    networks:
      - reverse-proxy
    deploy:
      mode: global
      labels:
        # Disable Traefik
        - "traefik.enable=false"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  outproxy:
    image: ghcr.io/soda-collections-objects-data-literacy/outproxy-image:1.x
    depends_on:
      - rdf4j
    networks:
      - reverse-proxy
    deploy:
      mode: global
      labels:
        # Disable Traefik
        - "traefik.enable=false"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  authproxy:
    image: ghcr.io/soda-collections-objects-data-literacy/authproxy-image:1.x
    environment:
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SUPERUSER_NAME=${DJANGO_SUPERUSER_NAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    volumes:
      - authproxy-data:/data/
    depends_on:
      - rdf4j
    networks:
      - reverse-proxy
    deploy:
      labels:
        # Enable Traefik as a reverse proxy and load balancer
        # Traefik will be accessible via the ts.${DOMAIN} hostname
        # and will redirect all requests to HTTPS
        - "traefik.enable=true"
        # Traefik should only listen on the reverse-proxy network
        - "traefik.docker.network=reverse-proxy"
        # Traefik should only run on nodes with the reverse-proxy.reverse-proxy-certificates label
        - "traefik.constraint-label=reverse-proxy"
        # redirect middlewares
        - traefik.http.middlewares.redirect-to-admin.redirectregex.regex=^(https?://ts.$${DOMAIN})/?$$
        - traefik.http.middlewares.redirect-to-admin.redirectregex.replacement=$${1}/admin
        # Define the rule for the Traefik router
        - "traefik.http.routers.authproxy.rule=Host(`ts.${DOMAIN}`)"
        # Traefik should listen on both HTTP and HTTPS
        - "traefik.http.routers.authproxy.entrypoints=web,websecure"
        # Apply the HTTPS redirect middleware
        - "traefik.http.routers.authproxy.middlewares=https-redirect,redirect-to-admin"
        # Enable TLS for the Traefik router
        - "traefik.http.routers.authproxy.tls=true"
        # Use the Let's Encrypt certificate resolver for the Traefik router
        - "traefik.http.routers.authproxy.tls.certresolver=le"
        # Set the port for the Traefik service to 8000
        - "traefik.http.services.authproxy.loadbalancer.server.port=8000"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  agent:
    image: portainer/agent:2.21.4
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - reverse-proxy
    deploy:
      mode: global
      labels:
        - traefik.enable=false
      placement:
        constraints: [node.platform.os == linux]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s


  portainer:
    image: portainer/portainer-ce:2.21.4
    # I do not know why 9001 (!=9000), but it works.
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer-data:/data
    depends_on:
      - reverse-proxy
    networks:
      - reverse-proxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        # Enable Traefik for this service
        - traefik.enable=true
        # Use the 'reverse-proxy' network
        - traefik.docker.network=reverse-proxy
        # Only use tasks with the 'reverse-proxy' label
        - traefik.constraint-label=reverse-proxy
        # Route requests to portainer.${DOMAIN}
        - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
        # Use the 'http' and 'https' entrypoints
        - traefik.http.routers.portainer.entrypoints=web,websecure
        # Redirect HTTP to HTTPS
        - "traefik.http.routers.portainer.middlewares=https-redirect"
        # Enable TLS
        - traefik.http.routers.portainer.tls=true
        # Use the Traefik certificate resolver
        - traefik.http.routers.portainer.tls.certresolver=le
        # Use port 9000 as the server port
        - traefik.http.services.portainer.loadbalancer.server.port=9000
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s


  reverse-proxy:
    image: traefik:3.0
    ports:
      - 80:80
      - 443:443
    networks:
      - reverse-proxy
    deploy:
      mode: global
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.reverse-proxy.reverse-proxy-certificates == true
      labels:
        # Enable Traefik as a reverse proxy and load balancer
        # Traefik will be accessible via the traefik.${DOMAIN} hostname
        # and will redirect all requests to HTTPS
        - "traefik.enable=true"
        # Traefik should only listen on the reverse-proxy network
        - "traefik.docker.network=reverse-proxy"
        # Traefik should only run on nodes with the reverse-proxy.reverse-proxy-certificates label
        - "traefik.constraint-label=reverse-proxy"
        # Enable HTTP Basic Authentication for the Traefik dashboard
        - "traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME}:${TRAEFIK_HASHED_PASSWORD}"
        # Redirect HTTP requests to HTTPS
        - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
        - "traefik.http.middlewares.https-redirect.redirectscheme.port=443"
        # Define the rule for the Traefik router
        - "traefik.http.routers.reverse-proxy.rule=Host(`traefik.${DOMAIN}`)"
        # Traefik should listen on both HTTP and HTTPS
        - "traefik.http.routers.reverse-proxy.entrypoints=web,websecure"
        # Apply the HTTPS redirect middleware and the HTTP Basic Authentication middleware
        - "traefik.http.routers.reverse-proxy.middlewares=admin-auth,https-redirect"
        # Enable TLS for the Traefik router
        - "traefik.http.routers.reverse-proxy.tls=true"
        # Use the Let's Encrypt certificate resolver for the Traefik router
        - "traefik.http.routers.reverse-proxy.tls.certresolver=le"
        # Use the internal Traefik API as the service for the Traefik router
        - "traefik.http.routers.reverse-proxy.service=api@internal"
        # Set the port for the Traefik service to 8080
        - "traefik.http.services.reverse-proxy.loadbalancer.server.port=8080"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - reverse-proxy-certificates:/certificates
    command:
      # Enable Docker provider
      - --providers.docker
      # Limit Docker provider to nodes with the reverse-proxy.reverse-proxy-certificates label
      - --providers.docker.constraints=Label(`traefik.constraint-label, reverse-proxy`)
      # Disable exposing services without Traefik labels
      - --providers.docker.exposedbydefault=false
      # Use the Docker Swarm endpoint
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      # Listen on port 80 for HTTP requests
      - --entrypoints.web.address=:80
      # Listen on port 443 for HTTPS requests
      - --entrypoints.websecure.address=:443
      # Listen on port 3306 for MySQL requests
      - --entrypoints.mysql.address=:3306
      # Redirect HTTP requests to HTTPS
      - --entryPoints.web.http.redirections.entryPoint.to=websecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      - --entryPoints.web.http.redirections.entrypoint.permanent=true
      # Use the specified email address for Let's Encrypt certificate requests
      - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL}
      # Use the HTTP challenge for Let's Encrypt certificate requests
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      # Use the specified storage location for Let's Encrypt certificates
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS-ALPN-01 challenge for Let's Encrypt certificate requests
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable access log output
      - --accesslog
      # Enable general log output
      - --log
      # Enable the Traefik API
      - --api

volumes:
  authproxy-data:
  drupal-libraries:
  drupal-modules:
  drupal-profiles:
  drupal-sites:
  drupal-themes:
  database-data:
  portainer-data:
  rdf4j-data:
  rdf4j-logs:
  reverse-proxy-certificates:

networks:
  reverse-proxy:
    driver: overlay
    attachable: true


